{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"D:/Project/eVoting_FE/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"D:/Project/eVoting_FE/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React, { useEffect, useState } from \"react\"; // node.js library that concatenates classes (strings)\n\nimport { Bar } from \"react-chartjs-2\"; // reactstrap components\n\nimport { Button, Card, CardHeader, CardBody, NavItem, NavLink, Nav, Progress, Table, Container, Row, Col } from \"reactstrap\"; // layout for this page\n\nimport Admin from \"layouts/Admin.js\";\nimport { useRouter } from \"next/router\";\nimport axios from \"axios\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\"; // core components\n\nvar Dashboard = function Dashboard(props) {\n  var _dataVote$series;\n\n  var router = useRouter(); // const Chart = require(\"chart.js\");\n\n  var _useState = useState([]),\n      dataVote = _useState[0],\n      setDataVote = _useState[1];\n\n  var _useState2 = useState(false),\n      showChart = _useState2[0],\n      setShowChart = _useState2[1];\n\n  var eventId = router.query.eventId;\n\n  var getData = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _yield$axios$get, res;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return axios.get(\"\".concat(process.env.NEXT_PUBLIC_URL, \"/dashboard/vote-candidate/\").concat(eventId));\n\n            case 2:\n              _yield$axios$get = _context.sent;\n              res = _yield$axios$get.data;\n              console.log(res.data);\n              setDataVote(res.data);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getData() {\n      return _ref.apply(this, arguments);\n    };\n  }(); // const options = {\n  //   chart: {\n  //     type: \"column\",\n  //   },\n  //   title: {\n  //     text: \"\",\n  //     align: \"left\",\n  //   },\n  //   subtitle: {\n  //     text: \"\",\n  //     align: \"left\",\n  //   },\n  //   xAxis: {\n  //     categories: dataVote && dataVote.categories,\n  //     crosshair: true,\n  //     accessibility: {\n  //       description: \"Kandidat\",\n  //     },\n  //   },\n  //   credits: {\n  //     enabled: false,\n  //   },\n  //   yAxis: {\n  //     min: 0,\n  //     title: {\n  //       text: \"Jumlah\",\n  //     },\n  //     Animation: true,\n  //   },\n  //   tooltip: {\n  //     valueSuffix: \"\",\n  //   },\n  //   plotOptions: {\n  //     column: {\n  //       pointPadding: 0.2,\n  //       borderWidth: 0,\n  //     },\n  //   },\n  //   series: [{ name: \"Kandidat\", data: dataVote && dataVote?.series?.data }],\n  // };\n\n\n  var options = {\n    chart: {\n      type: \"bar\"\n    },\n    title: {\n      text: \"\",\n      align: \"left\"\n    },\n    subtitle: {\n      text: \"\",\n      align: \"left\"\n    },\n    xAxis: {\n      categories: dataVote && dataVote.categories,\n      title: {\n        text: null\n      },\n      gridLineWidth: 1,\n      lineWidth: 0\n    },\n    yAxis: {\n      min: 0,\n      title: {\n        text: \"\",\n        align: \"high\"\n      },\n      labels: {\n        overflow: \"justify\"\n      },\n      gridLineWidth: 0\n    },\n    tooltip: {\n      y: {\n        formatter: function formatter(value, _ref2) {\n          var series = _ref2.series,\n              seriesIndex = _ref2.seriesIndex,\n              dataPointIndex = _ref2.dataPointIndex,\n              w = _ref2.w;\n          return value;\n        }\n      }\n    },\n    plotOptions: {\n      bar: {\n        borderRadius: \"50%\",\n        dataLabels: {\n          enabled: true\n        },\n        groupPadding: 0.1\n      }\n    },\n    legend: {\n      // layout: \"top\",\n      align: \"center\",\n      verticalAlign: \"bottom\",\n      floating: false,\n      borderWidth: 1,\n      backgroundColor: Highcharts.defaultOptions.legend.backgroundColor || \"#FFFFFF\",\n      shadow: true\n    },\n    credits: {\n      enabled: false\n    },\n    series: [{\n      name: \"Vote\",\n      data: dataVote && (dataVote === null || dataVote === void 0 ? void 0 : (_dataVote$series = dataVote.series) === null || _dataVote$series === void 0 ? void 0 : _dataVote$series.data)\n    }]\n  };\n\n  var handleActiveChart = function handleActiveChart() {\n    getData();\n    setShowChart(true);\n  };\n\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsx(Container, {\n      fluid: true,\n      className: \"mt-3\",\n      children: /*#__PURE__*/_jsx(Row, {\n        className: \"justify-content-center\",\n        children: /*#__PURE__*/_jsx(Col, {\n          xl: \"8\",\n          md: \"12\",\n          children: /*#__PURE__*/_jsxs(Card, {\n            className: \"shadow\",\n            children: [/*#__PURE__*/_jsx(CardHeader, {\n              className: \"bg-transparent\",\n              children: /*#__PURE__*/_jsx(Row, {\n                className: \"align-items-center\",\n                children: /*#__PURE__*/_jsx(\"div\", {\n                  className: \"col\",\n                  children: /*#__PURE__*/_jsx(\"h2\", {\n                    className: \"mb-0\",\n                    children: \"Hasil Vote\"\n                  })\n                })\n              })\n            }), /*#__PURE__*/_jsxs(CardBody, {\n              children: [showChart === false ? /*#__PURE__*/_jsx(Button, {\n                onClick: function onClick() {\n                  return handleActiveChart();\n                },\n                color: \"success\",\n                className: \"mb-3\",\n                children: \"Kalkulasi Sekarang\"\n              }) : null, showChart ? /*#__PURE__*/_jsx(HighchartsReact, {\n                highcharts: Highcharts,\n                options: options\n              }) : null]\n            })]\n          })\n        })\n      })\n    })\n  });\n};\n\nDashboard.layout = Admin;\nexport default Dashboard;","map":null,"metadata":{},"sourceType":"module"}