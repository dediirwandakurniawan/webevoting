{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Project\\\\eVoting_FE\\\\components\\\\Event\\\\dashboard.js\";\nimport React, { useEffect, useState } from \"react\"; // node.js library that concatenates classes (strings)\n\nimport { Bar } from \"react-chartjs-2\"; // reactstrap components\n\nimport { Button, Card, CardHeader, CardBody, NavItem, NavLink, Nav, Progress, Table, Container, Row, Col } from \"reactstrap\"; // layout for this page\n\nimport Admin from \"layouts/Admin.js\";\nimport { useRouter } from \"next/router\";\nimport axios from \"axios\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport Chart from \"react-apexcharts\"; // core components\n\nconst Dashboard = props => {\n  var _dataVote$series;\n\n  const router = useRouter(); // const Chart = require(\"chart.js\");\n\n  const {\n    0: dataVote,\n    1: setDataVote\n  } = useState([]);\n  const {\n    0: showChart,\n    1: setShowChart\n  } = useState(false);\n  const eventId = router.query.eventId;\n\n  const getData = async () => {\n    const {\n      data: res\n    } = await axios.get(`${process.env.NEXT_PUBLIC_URL}/dashboard/vote-candidate/${eventId}`);\n    setDataVote(res.data);\n  }; // const options = {\n  //   chart: {\n  //     type: \"column\",\n  //   },\n  //   title: {\n  //     text: \"\",\n  //     align: \"left\",\n  //   },\n  //   subtitle: {\n  //     text: \"\",\n  //     align: \"left\",\n  //   },\n  //   xAxis: {\n  //     categories: dataVote && dataVote.categories,\n  //     crosshair: true,\n  //     accessibility: {\n  //       description: \"Kandidat\",\n  //     },\n  //   },\n  //   credits: {\n  //     enabled: false,\n  //   },\n  //   yAxis: {\n  //     min: 0,\n  //     title: {\n  //       text: \"Jumlah\",\n  //     },\n  //     Animation: true,\n  //   },\n  //   tooltip: {\n  //     valueSuffix: \"\",\n  //   },\n  //   plotOptions: {\n  //     column: {\n  //       pointPadding: 0.2,\n  //       borderWidth: 0,\n  //     },\n  //   },\n  //   series: [{ name: \"Kandidat\", data: dataVote && dataVote?.series?.data }],\n  // };\n\n\n  const options = {\n    chart: {\n      type: \"bar\"\n    },\n    exporting: {\n      enabled: true\n    },\n    title: {\n      text: \"\",\n      align: \"left\"\n    },\n    subtitle: {\n      text: \"\",\n      align: \"left\"\n    },\n    xAxis: {\n      categories: dataVote && dataVote.categories,\n      title: {\n        text: null\n      },\n      gridLineWidth: 1,\n      lineWidth: 0\n    },\n    yAxis: {\n      min: 0,\n      title: {\n        text: \"\",\n        align: \"high\"\n      },\n      labels: {\n        overflow: \"justify\"\n      },\n      gridLineWidth: 0,\n      tickInterval: 1\n    },\n    tooltip: {\n      x: {\n        formatter: function (value, {\n          series,\n          seriesIndex,\n          dataPointIndex,\n          w\n        }) {\n          return value;\n        }\n      }\n    },\n    exporting: {\n      buttons: {\n        contextButton: {\n          menuItems: [\"viewFullscreen\", \"separator\", \"downloadPNG\", \"downloadSVG\", \"downloadPDF\", \"separator\", \"downloadXLS\"]\n        }\n      },\n      enabled: true\n    },\n    navigation: {\n      buttonOptions: {\n        align: \"right\",\n        verticalAlign: \"top\",\n        y: 0\n      }\n    },\n    plotOptions: {\n      bar: {\n        borderRadius: \"50%\",\n        dataLabels: {\n          enabled: true\n        },\n        groupPadding: 0.1\n      }\n    },\n    legend: {\n      // layout: \"top\",\n      itemDistance: 1,\n      align: \"center\",\n      verticalAlign: \"bottom\",\n      floating: false,\n      borderWidth: 1,\n      backgroundColor: \"#FFFFFF\",\n      shadow: true\n    },\n    credits: {\n      enabled: false\n    },\n    series: [{\n      name: \"Vote\",\n      data: dataVote && (dataVote === null || dataVote === void 0 ? void 0 : (_dataVote$series = dataVote.series) === null || _dataVote$series === void 0 ? void 0 : _dataVote$series.data)\n    }]\n  };\n\n  const handleActiveChart = () => {\n    getData();\n    setShowChart(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      fluid: true,\n      className: \"mt-3\",\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        className: \"justify-content-center\",\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          xl: \"8\",\n          md: \"12\",\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            className: \"shadow\",\n            children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n              className: \"bg-transparent\",\n              children: /*#__PURE__*/_jsxDEV(Row, {\n                className: \"align-items-center\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col\",\n                  children: /*#__PURE__*/_jsxDEV(\"h2\", {\n                    className: \"mb-0\",\n                    children: \"Hasil Vote\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 198,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 196,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n              children: [showChart === false ? /*#__PURE__*/_jsxDEV(Button, {\n                onClick: () => handleActiveChart(),\n                color: \"success\",\n                className: \"mb-3\",\n                children: \"Kalkulasi Sekarang\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 19\n              }, this) : null, showChart ? /*#__PURE__*/_jsxDEV(HighchartsReact, {\n                highcharts: Highcharts,\n                options: options\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 19\n              }, this) : null]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\nDashboard.layout = Admin;\nexport default Dashboard;","map":{"version":3,"sources":["D:/Project/eVoting_FE/components/Event/dashboard.js"],"names":["React","useEffect","useState","Bar","Button","Card","CardHeader","CardBody","NavItem","NavLink","Nav","Progress","Table","Container","Row","Col","Admin","useRouter","axios","Highcharts","HighchartsReact","Chart","Dashboard","props","router","dataVote","setDataVote","showChart","setShowChart","eventId","query","getData","data","res","get","process","env","NEXT_PUBLIC_URL","options","chart","type","exporting","enabled","title","text","align","subtitle","xAxis","categories","gridLineWidth","lineWidth","yAxis","min","labels","overflow","tickInterval","tooltip","x","formatter","value","series","seriesIndex","dataPointIndex","w","buttons","contextButton","menuItems","navigation","buttonOptions","verticalAlign","y","plotOptions","bar","borderRadius","dataLabels","groupPadding","legend","itemDistance","floating","borderWidth","backgroundColor","shadow","credits","name","handleActiveChart","layout"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n// node.js library that concatenates classes (strings)\r\n\r\nimport { Bar } from \"react-chartjs-2\";\r\n// reactstrap components\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  NavItem,\r\n  NavLink,\r\n  Nav,\r\n  Progress,\r\n  Table,\r\n  Container,\r\n  Row,\r\n  Col,\r\n} from \"reactstrap\";\r\n// layout for this page\r\nimport Admin from \"layouts/Admin.js\";\r\nimport { useRouter } from \"next/router\";\r\nimport axios from \"axios\";\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport Chart from \"react-apexcharts\";\r\n\r\n// core components\r\n\r\nconst Dashboard = (props) => {\r\n  const router = useRouter();\r\n\r\n  // const Chart = require(\"chart.js\");\r\n  const [dataVote, setDataVote] = useState([]);\r\n  const [showChart, setShowChart] = useState(false);\r\n  const eventId = router.query.eventId;\r\n\r\n  const getData = async () => {\r\n    const { data: res } = await axios.get(\r\n      `${process.env.NEXT_PUBLIC_URL}/dashboard/vote-candidate/${eventId}`\r\n    );\r\n    setDataVote(res.data);\r\n  };\r\n\r\n  // const options = {\r\n  //   chart: {\r\n  //     type: \"column\",\r\n  //   },\r\n  //   title: {\r\n  //     text: \"\",\r\n  //     align: \"left\",\r\n  //   },\r\n  //   subtitle: {\r\n  //     text: \"\",\r\n  //     align: \"left\",\r\n  //   },\r\n\r\n  //   xAxis: {\r\n  //     categories: dataVote && dataVote.categories,\r\n  //     crosshair: true,\r\n  //     accessibility: {\r\n  //       description: \"Kandidat\",\r\n  //     },\r\n  //   },\r\n  //   credits: {\r\n  //     enabled: false,\r\n  //   },\r\n  //   yAxis: {\r\n  //     min: 0,\r\n  //     title: {\r\n  //       text: \"Jumlah\",\r\n  //     },\r\n  //     Animation: true,\r\n  //   },\r\n  //   tooltip: {\r\n  //     valueSuffix: \"\",\r\n  //   },\r\n  //   plotOptions: {\r\n  //     column: {\r\n  //       pointPadding: 0.2,\r\n  //       borderWidth: 0,\r\n  //     },\r\n  //   },\r\n  //   series: [{ name: \"Kandidat\", data: dataVote && dataVote?.series?.data }],\r\n  // };\r\n\r\n  const options = {\r\n    chart: {\r\n      type: \"bar\",\r\n    },\r\n\r\n    exporting: {\r\n      enabled: true,\r\n    },\r\n    title: {\r\n      text: \"\",\r\n      align: \"left\",\r\n    },\r\n    subtitle: {\r\n      text: \"\",\r\n\r\n      align: \"left\",\r\n    },\r\n    xAxis: {\r\n      categories: dataVote && dataVote.categories,\r\n      title: {\r\n        text: null,\r\n      },\r\n      gridLineWidth: 1,\r\n      lineWidth: 0,\r\n    },\r\n    yAxis: {\r\n      min: 0,\r\n      title: {\r\n        text: \"\",\r\n        align: \"high\",\r\n      },\r\n      labels: {\r\n        overflow: \"justify\",\r\n      },\r\n      gridLineWidth: 0,\r\n      tickInterval: 1,\r\n    },\r\n    tooltip: {\r\n      x: {\r\n        formatter: function (\r\n          value,\r\n          { series, seriesIndex, dataPointIndex, w }\r\n        ) {\r\n          return value;\r\n        },\r\n      },\r\n    },\r\n    exporting: {\r\n      buttons: {\r\n        contextButton: {\r\n          menuItems: [\r\n            \"viewFullscreen\",\r\n            \"separator\",\r\n            \"downloadPNG\",\r\n            \"downloadSVG\",\r\n            \"downloadPDF\",\r\n            \"separator\",\r\n            \"downloadXLS\",\r\n          ],\r\n        },\r\n      },\r\n      enabled: true,\r\n    },\r\n    navigation: {\r\n      buttonOptions: {\r\n        align: \"right\",\r\n        verticalAlign: \"top\",\r\n        y: 0,\r\n      },\r\n    },\r\n    plotOptions: {\r\n      bar: {\r\n        borderRadius: \"50%\",\r\n        dataLabels: {\r\n          enabled: true,\r\n        },\r\n        groupPadding: 0.1,\r\n      },\r\n    },\r\n    legend: {\r\n      // layout: \"top\",\r\n      itemDistance: 1,\r\n      align: \"center\",\r\n      verticalAlign: \"bottom\",\r\n      floating: false,\r\n      borderWidth: 1,\r\n      backgroundColor: \"#FFFFFF\",\r\n      shadow: true,\r\n    },\r\n    credits: {\r\n      enabled: false,\r\n    },\r\n    series: [{ name: \"Vote\", data: dataVote && dataVote?.series?.data }],\r\n  };\r\n\r\n  const handleActiveChart = () => {\r\n    getData();\r\n    setShowChart(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* Page content */}\r\n      <Container fluid className=\"mt-3\">\r\n        <Row className=\"justify-content-center\">\r\n          <Col xl=\"8\" md=\"12\">\r\n            <Card className=\"shadow\">\r\n              <CardHeader className=\"bg-transparent\">\r\n                <Row className=\"align-items-center\">\r\n                  <div className=\"col\">\r\n                    {/* <h6 className=\"text-uppercase text-muted ls-1 mb-1\">Performance</h6> */}\r\n                    <h2 className=\"mb-0\">Hasil Vote</h2>\r\n                  </div>\r\n                </Row>\r\n              </CardHeader>\r\n              <CardBody>\r\n                {showChart === false ? (\r\n                  <Button\r\n                    onClick={() => handleActiveChart()}\r\n                    color=\"success\"\r\n                    className=\"mb-3\"\r\n                  >\r\n                    Kalkulasi Sekarang\r\n                  </Button>\r\n                ) : null}\r\n\r\n                {/* Chart */}\r\n                {/* <div className=\"chart\">\r\n                  <Bar data={chartHasilVote.data} options={chartHasilVote.options} />\r\n                </div> */}\r\n                {showChart ? (\r\n                  <HighchartsReact highcharts={Highcharts} options={options} />\r\n                ) : null}\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nDashboard.layout = Admin;\r\n\r\nexport default Dashboard;\r\n"]},"metadata":{},"sourceType":"module"}